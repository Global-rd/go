services:
  kafka:
    image: bitnami/kafka:3.6
    container_name: kafka
    ports:
      - "9092:9092" # For clients on host
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENERS=PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_CFG_GROUP_INITIAL_REBALANCE_DELAY_MS=0

  db:
    image: postgres:latest
    restart: unless-stopped
    hostname: db
    container_name: db
    ports:
      - 5432:5432
    environment:
      POSTGRES_DB: gocourse
      POSTGRES_USER: dbuser
      POSTGRES_PASSWORD: dbpass
    volumes:
      - ./testdata/database.sql:/docker-entrypoint-initdb.d/database.sql
  
  app1:
    image: golang:1.23.5
    container_name: go-web-service1
    command: bash -c "go get ./... && go run ."
    working_dir: /app
    ports:
      - 8080:8080
    depends_on:
      - kafka
    volumes:
      - ./service1:/app
  
  app2:
    image: golang:1.23.5
    container_name: go-web-service2
    command: bash -c "go get ./... && go run ."
    working_dir: /app
    ports:
      - 8081:8081
    depends_on:
      - db
      - kafka
    volumes:
      - ./service2:/app